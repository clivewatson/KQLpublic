// Clive Watson : Microsoft 
// CIDR examples
// Keywords CIDR, IP, ipv4, parse_Ipv4, ipv4_is_match
//


//
// Look at ranges, is my IP in these defined range of allowed IP addreses?
//

SigninLogs
| where TimeGenerated > ago(24h)
| extend parsed_IP = parse_ipv4(IPAddress)
| extend local = case(parsed_IP between ( parse_ipv4("67.0.0.0")  .. parse_ipv4("67.255.255.255")  ),"Allowed",  
                      parsed_IP between ( parse_ipv4("74.0.0.0")  .. parse_ipv4("74.255.255.255")  ),"Allowed",   
                      parsed_IP between ( parse_ipv4("100.0.0.0") .. parse_ipv4("109.255.255.255") ),"Allowed",
                      //else 
                      "Not Allowed"  )
| summarize count(), make_set(IPAddress) by local
| order by local asc


//
// CIDR match #1
// Is my IP matched to this range, whats its hostcount and class?

datatable(ip1_string:string, ip2_string:string)
[
 '1.168.1.0',      '192.168.1.0',         
 '192.168.1.1/24', '192.168.1.255',     
 '192.168.1.1',    '192.168.1.10/24',   
 '239.168.1.1/30', '192.168.1.255/24',  
]
| extend CIDRresult= ipv4_is_match(ip1_string, ip2_string)    // In CIDR range?
| extend hostcount = pow(2,(32 - split(ip1_string,"/").[1]))  // How many hosts supported?
| extend IPAddress = tostring(split(ip1_string,"/").[0])      // Get just IP part of CIDR
| extend parsed_IP = parse_ipv4(IPAddress)
| extend ipClass = case(parsed_IP between ( parse_ipv4('1.0.0.0')  .. parse_ipv4('126.0.0.0')  ),"A",  
                        parsed_IP between ( parse_ipv4('128.0.0.0').. parse_ipv4('191.255.0.0')  ),"B",   
                        parsed_IP between ( parse_ipv4('192.0.0.0').. parse_ipv4('223.255.255.0') ),"C",
                        parsed_IP between ( parse_ipv4('224.0.0.0').. parse_ipv4('239.255.255.255') ),"D",
                        parsed_IP between ( parse_ipv4('240.0.0.0').. parse_ipv4('255.255.255.254') ),"E",
                   //else 
                   strcat("Unknown class", parse_ipv4(IPAddress))
                   )


//
// CIDR match #2
// please provide the IP range in CIDR format to compare, the IIF statment should have the same CIDR prefix
//

SigninLogs
| extend inrange = iif(ipv4_is_match(IPAddress, "213.57.167.77/31"),31,0)
| where  inrange > 0
| project IPAddress , inrange 
| extend hostcount = pow(2,(32 - inrange))
| extend IPAddress = tostring(split(IPAddress,"/").[0])      // Get just IP part of CIDR
| extend parsed_IP = parse_ipv4(IPAddress)
| extend ipClass = case(
                        parsed_IP between ( parse_ipv4('1.0.0.0')  .. parse_ipv4('126.0.0.0')  ),"A",  
                        parsed_IP between ( parse_ipv4('128.0.0.0').. parse_ipv4('191.255.0.0')  ),"B",   
                        parsed_IP between ( parse_ipv4('192.0.0.0').. parse_ipv4('223.255.255.0') ),"C",
                        parsed_IP between ( parse_ipv4('224.0.0.0').. parse_ipv4('239.255.255.255') ),"D",
                        parsed_IP between ( parse_ipv4('240.0.0.0').. parse_ipv4('255.255.255.254') ),"E",
                        //else 
                        strcat("Unknown class", parse_ipv4(IPAddress))
                       )
| summarize by IPAddress, inrange, hostcount, ipClass


//
// read an external data source and map to AzureActivity matching to CIDR range 
//

// source idea: https://techcommunity.microsoft.com/t5/azure-sentinel/approximate-partial-and-combined-lookups-in-azure-sentinel/ba-p/1393795 
// get lookup data 
let geoData = 
    externaldata (network:string,geoname_id:string,continent_code:string,
                  continent_name:string,country_iso_code:string,
                  country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)
    [@"https://datahub.io/core/geoip2-ipv4/r/geoip2-ipv4.csv"] with(format="csv", ignoreFirstRecord=true);
// now turn remote data to scalar 
let lookup = toscalar( geoData |  summarize list_CIDR=make_set(network) );
// link to Azure Activity and specifically CallerIpAddress  
AzureActivity
// get a small time range (this REALLY helps perf!!!!)
| where TimeGenerated > ago(2h)
| mv-apply list_CIDR=lookup to typeof(string) on
(
    // Match each IP from 'CallerIpAddress' with the remote 'network' column 
    where ipv4_is_match (CallerIpAddress, list_CIDR) //== false
)
// summarize to remove any duplicates
| summarize by CallerIpAddress, list_CIDR
| join kind=inner 
  (
  // join to remote data again, to add enrichments 
  geoData
  ) on $left.list_CIDR == $right.network
// build final display 
| summarize by CallerIpAddress, network, country_name, country_iso_code  
